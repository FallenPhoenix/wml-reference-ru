{{WML Tags}}
== Обзор ==

Напрямую «Веснот» загружает только один конфиг-файл: '''data/_main.cfg'''. Тем не менее, '''препроцессор WML''' позволяет подключать и другие. Whenever a WML file is read by Wesnoth, it is passed through the preprocessor.

The preprocessor can interpret a simple language of string expansions known as ''macros''. A macro should always be defined '''before''' the place where it needs to be used.

The preprocessor is applied recursively, so included files will be parsed for macros, and after macro expansion will be parsed for macros again, and so on. As a result, you should not write a recursive macro that references itself, because it will cause errors (but, alas, not necessarily error messages).


== Директивы препроцессора ==

Ниже описанные директивы используются для создания и использования макросов, i.e. shortcuts which reduce repetition of information. Список всех предопределенных макросов вы найдете [http://www.wesnoth.org/macro-reference.xhtml тут].

Препроцессор не раз менялся, так что не ждите, что старые версии игры будут вести себя точно так же, как актуальные.

'''Note:''' In multiplayer scenarios, these directives will appear to work only for the host and not for other clients. This is because the preprocessor is run only on the host, and the clients receive the resultant WML from the server. It's particularly important to keep this in mind before using preprocessor conditionals.

=== #define ===

'''Синтаксис: #define ''имя_макроса'' [''параметры''] ''<новая_строка>'' ''подстановка'' #enddef'''

Определяет макрос. Все последующие вхождения '''{''имя_макроса'' [''аргументы'']}''' (см. ниже) будут заменяться содержимым блока ''подстановка'', с предварительной заменой внутри ''подстановки'' всех вхождений типа {''параметр''} на соответствующие им значения (''аргументы''). Например, макрос ENEMY_UNIT для параграфа [[#Вложение макросов|Вложение макросов]] можно было бы задать следующим образом:

 #define ENEMY_UNIT TYPE X Y
 ## Препроцессор не делает различий между типами данных; так что последовательность
 ## расположения параметров и аргументов - единственное, что определяет их связь
 ## между собой.
 [unit]
     type={TYPE} ## Боец создается типа TYPE, так что разные вызовы
                 ## данного макроса способны создавать различных бойцов.
     x={X}
     y={Y}
     side=2 ## Независимо от входных параметров он будет врагом. Но это уменьшает
            ## количество повторяемой информации, т.к. не нужно для каждого бойца
            ## указывать сторону.
 [/unit]
 #enddef

(Для подробной информации по созданию бойцов см. [[SingleUnitWML]].)

=== #undef ===

'''Синтаксис:''' '''#undef ''имя_макроса'' '''

Заставляет препроцессор "забыть" известное ему макроопределение.

=== Директива вложения {} ===

Данная директива может быть использована для вложения макросов или файлов.

==== Вложение файлов и папок ====

'''Синтаксис: {''путь''}'''

Подключает файл, находящийся по указанному ''пути'', which will in turn run the preprocessor on it and perform any required substitutions or inclusions within it. Путь не должен содержать "..", иначе вложение просто игнорируется.

Точное место поиска файлов игровым движком зависит от префикса команды:

* '''{''path''}''': Если ''path'' не является известным макросом (см. ниже), игра принимает его за относительный путь к файлу в базовой папке "data/" и пытается такой файл подключить.
* '''{~''path''}''': Путь воспринимается относительно пользовательской папки '''data/''', где по стандарту лежат все аддоны.
* '''{./''path''}''': Путь относительно папки с файлом, в котором прописано вложение.

Information for locating the user data and game data directories can be found in [[EditingWesnoth]].

Разделителем пути обязательно должен служить прямой слеш ('''/'''), даже если ваша операционка использует что-то другое типа бэкслеша ('''\''') или двоеточия (''':''')! Также важно сохранять оригинальный регистр букв в именах файлов и папок для совместимости с Linux'овыми файловыми системами, которыми к нему чувствительны.

Если ''путь'' указывает не на файл, а на папку, препроцессор в алфавитном порядке подключает все находящиеся в ней файлы с расширением '''.cfg'''; остальные файлы (типа '''.map''', '''.png''' и т.п.) игнорируются.

Но некоторые папки обрабатываются особым образом, в соответствии с их содержимым:

* Если там находится файл '''_main.cfg''', то подключается и обрабатывается только он. It may include other files from its own directory or subdirectories within it, of course. Это используется для работы с самостоятельными пакетами типа пользовательских аддонов.
* If there are files named '''_main.cfg''' in subdirectories of the target and there isn't one in the target itself, they will be all preprocessed. Возьмем следующую структуру:
 dir/
 dir/a/_main.cfg
 dir/a/other.cfg
 dir/b/_main.cfg
 dir/b/other.cfg
 dir/other.cfg
В таком случае использование директивы '''{dir}''' приведет к подключению dir/a/_main.cfg, dir/b/_main.cfg и dir/other.cfg.
* Если есть файл '''_initial.cfg''' но нету '''_main.cfg''', он гарантировано обрабатывается перед всеми остальными файлами.
* Если есть файл '''_final.cfg''' но нету '''_main.cfg''', он обрабатывается в последнюю очередь.

==== Вложение макросов ====

'''Синтаксис: {''имя_макроса'' [''аргументы'']}'''

Если макрос с таким ''именем'' объявлен, препроцессор заменяет данную инструкцию на его содержимое, используя указанные ''аргументы''. Число параметров должно точно совпадать, иначе это приведет к ошибке.

Аргументы, состоящие из нескольких слов, нужно заключать в скобки. Так, в команде '''{ENEMY_UNIT Wolf Rider 18 24}''' препроцессор увидит 4 аргумента и выдаст ошибку, ибо в объявлении макроса значилось только 3; но '''{ENEMY_UNIT (Wolf Rider) 18 24}''' будет понята верно.

Называть параметры именами уже существующих макросов допустимо, но они в таком случае имеют больший приоритет:

 #define VARIABLE
 #enddef
 #define MACRO VARIABLE
     {VARIABLE} # вызывает аргумент, а не объявленный выше макрос
 #enddef

=== #ifdef и #ifndef ===

В отличие от прочих директив препроцессора, '''#ifdef''' и '''#ifndef''' служат не просто для удобства. Они необходимы для определения различения игровых режимов и уровней сложности (см. параграф [[#Встроенные макросы|Встроенные макросы]]).

'''Синтаксис:''' '''#ifdef ''имя_макроса'' ''подстановка_если_определен'' [#else ''подстановка_если_не_определен'' ] #endif'''

Если макрос с указанным ''именем'' был объявлен директивой '''#define''', будет выполняться первый блок; в противном случае - второй (если прописан).

'''#ifndef''' работает прямо противоположно '''#ifdef''':

'''Синтаксис:''' '''#ifndef ''имя_макроса'' ''подстановка_если_не_определен''  [#else ''подстановка_если_определен''] #endif'''

=== #ifhave и #ifnhave ===

'''Синтаксис:''' '''#ifhave ''путь'' ''подстановка_при_наличии_файла'' [#else ''подстановка_при_отстутствии_файла''] #endif'''

Проверяет существование файла. Использует те же относительные пути, что и директива вложения (см. выше).

Пример:

 #ifhave ~add-ons/My_Addon/_main.cfg
     {MY_ADDON_MACROS}
 #endif

'''#ifnhave''' противоположна '''#ifhave''':

'''Синтаксис:''' '''#ifnhave ''путь'' ''подстановка_при_отстутствии_файла'' [#else ''подстановка_при_наличии_файла''] #endif'''

=== #ifver и #ifnver ===

'''Синтаксис:''' '''#ifver ''имя_макроса'' ''оператор'' ''номер_версии'' ''<новая_строка>'' ''подстановка_при_выполнении_условия'' [#else ''подстановка_при_невыполнении_условия''] #endif'''

Сравнивает версию, определенную внутри макроса, с указанным аргументом. ''Оператор'' может быть одним из следующих: ''=='' (равно), ''!='' (не равно), ''<'' (меньше), ''<='' (меньше или равно), ''>'' (больше), ''>='' (больше или равно). Макрос же должен быть заранее определен, содержать только простое текстовое значение, и не должен использовать аргументы.

Версии с текстовыми суффиксами сортируются в бинарном порядке и идут после всех версий с тем же номером. Наиболее распространен суффикс "+svn", но он представляет множество различных ревизий, так что не рекомендуется с ним что-либо сравнивать.

Пример:
 #ifver WESNOTH_VERSION >= 1.9.7+svn
     [message]
         speaker=narrator
         message="Я запущен в Весноте 1.9.7+svn, 1.9.8 или более поздней версии."
     [/message]
 #else
 #ifver WESNOTH_VERSION == 1.9.7
     [message]
         speaker=narrator
         message="Я запущен в Весноте 1.9.7, поэтому подключаю дополнительный код для обхода бага №9001!"
     [/message]
 #endif
 #endif

'''#ifnver''' противоположна '''#ifver''':

'''Синтаксис:''' '''#ifnver ''имя_макроса'' ''оператор'' ''номер_версии'' ''<новая_строка>'' ''подстановка_при_невыполнении_условия'' [#else ''подстановка_при_выполнении_условия''] #endif'''


== Встроенные макросы ==

Следующие макросы автоматически объявляются движком в зависимости от конфигурации и режима игры.

* Собственное обозначение кампании (см. ''define'' в [[CampaignWML]]): объявляется при запуске одиночных кампаний.
* Уровень сложности кампании, обычно '''EASY''', '''NORMAL''' или '''HARD''' (см. ''difficulties'' в [[CampaignWML]]): так же объявляется в сольных кампаниях в соответствии с выбранным уровнем сложности.
* '''MULTIPLAYER''': объявлен в режиме мультиплеера.
* '''TUTORIAL''': объявлен во время прохождения обучающей кампании.
* '''EDITOR''': объявлен при работе встроенного редактора карт.
* '''DEBUG_MODE''': объявлен, когда игра запущена в режиме отладки (т.е. с параметром '''-d''' или '''--debug''').
* '''APPLE''': объявлен при обработке основных игровых данных на Mac OS X.
* '''WESNOTH_VERSION''': объявлен всегда и содержит информацию о версии игры.


== Command-line preprocessor ==

'''Синтаксис: --preprocess ''<source file/directory>'' ''<target directory>'' '''

Or the short form:

'''Синтаксис: -p ''<source file/directory>'' ''<target directory>'' '''

You can specify a list of predefined defines with:

'''Синтаксис: --preprocess-defines=DEFINE1,DEFINE2,...'''

comma separated list of defines to be used by '--preprocess' command. If 'SKIP_CORE' is in the define list the data/core won't be preprocessed."

The command will preprocess first the common config files in the main game ''data/'' directory, and afterwards the specified ones. You can specify a single file to be preprocessed (if you want to preprocess multiple separate files, you'll need to run a different command line for each one), or an entire directory, which will be preprocessed according to the rules used by the inclusion directive above.

The resulted preprocessed files will be written in the target directory. There will be two types of files: .cfg files --- the normal ones, and .plain files containing line markers and textdomain changes.

If by chance, the simple macro define doesn't suffice, you can use:

'''Синтаксис: --preprocess-input-macros <file>'''

To import an existing file that contains macros, and they will be available in the defines database before processing the specified files.

There is also the possibility to export the preprocessed defines/macro list with:

'''Синтаксис: --preprocess-output-macros <target file>'''

This file could be fed to the 'input-macros' argument next time you run it. For example, a scenario  would be: parsing just the core first time, and for the intended target files, you would add SKIP_CORE but import the generated macros file - that will be faster than preprocessing the core again.

If ''file/directory'' and ''target directory'' are not absolute paths, they will be considered relative to the game's executable path.

Some examples:

* Preprocess the entire tutorial dir, and write the results in the ~/result folder:
 -p ~/wesnoth/data/campaigns/tutorial ~/result
* Add the MULTIPLAYER define to the list and preprocess a scenario's config file:
 -p ~/.wesnoth/data/add-ons/My_Campaign/scenarios/01_First_Scenario.cfg ~/result --preprocess-defines=MULTIPLAYER
* Add the MY_CAMPAIGN and HARD defines before preprocessing a campaign's files:
 -p ~/.wesnoth/data/add-ons/My_Campaign ~/result --preprocess-defines=MY_CAMPAIGN,HARD

If you want a more detailed (and potentially overwhelming) log, you can simply add the switches '''--log-debug=all''' or '''--log-info=all''' to the command line, so you can see how things are preprocessed in detail.


== Смотрите также ==
* [[SyntaxWML]]
* [[ReferenceWML]]

[[Category: WML Reference]]
