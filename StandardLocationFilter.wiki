{{WML Tags}}

= Стандартный фильтр локаций =

Часть [[FilterWML]], представляющая стандартный способ отбора локаций (т.е. гексагонов карты).
Когда в каком-нубудь теге в виде параметра указан [[StandardLocationFilter]], то имеется в виду, что там можно использовать все ключи, перечисленные ниже. В некоторых случаях они должны быть помещены в '''[filter_location]''', но большинство тегов (например, '''[store_locations]''') поддерживает их напрямую. Так что обычно если ни о каком контейнере не говорится, то и не нужно его использовать.

Поддерживаются следующие теги и атрибуты:

* '''time_of_day''': filter matches only on a given time of day (one of lawful, chaotic, neutral or liminal). <br>Примечание: ''chaotic'', ''lawful'', ''neutral'' и ''liminal'' - не времена суток, а типы мировоззрения бойцов (alignment); для указания 'dawn', 'dusk', 'first watch' и т.п., используйте '''time_of_day_id'''.
* '''time_of_day_id''': Список актуальных идентификаторов времени суток. These IDs are taken from '''data/core/macros/schedules.cfg'''. Permissible values are case-sensitive: dawn, morning, afternoon, dusk, first_watch, second_watch, indoors, underground and deep_underground. 
* '''terrain''': Список территорий (также смотрите: [[FilterWML#Filtering_Terrains|Filtering Terrains]]).
* '''x,y''': the same as in the unit filter; supports any range (см. [[#Notes_about_Coordinate_Usage|примечания]]).
* '''[filter]''' with a [[StandardUnitFilter]] as argument; if present a unit must also be there
* '''owner_side''': If a valid side number, restricts stored locations to villages belonging to this side. If 0, restricts to all unowned locations (the whole map except villages which belong to some valid side). A hex is considered a village if and only if its [ [[TerrainWML|terrain_type]] ]gives_income= parameter was set to yes (which means a side can own that hex).
* '''[filter_vision]''': {{DevFeature1.11}}: Проверяет видимость локаций.
** '''visible''': При значении "yes" отбираются видимые локации, при "no" - невидимые (по умолчанию: yes).
** '''respect_fog''': При значении "yes" невидимыми считаются как локации, покрытые пеленой, так и покрытые туманом войны, при "no" - только пеленой (по умолчанию: yes).
** [[StandardSideFilter]]: Проверку на видимость должны пройти все указанные в нем стороны.
*'''[filter_owner]''': {{DevFeature1.11}}: If present, inline owner_side= is ignored. Restricts stored locations to villages, each of which must belong to any of the matching sides. If no sides match, restricts to unowned villages (and only these).
**'''[[StandardSideFilter]]''' tags and keys as arguments
* '''find_in''': Имя массива или контейнера. Если указано, удовлетворять фильтру будут только локации, сохраненные в этой переменной.
* '''radius''': matches if any location within the radius matches this filter (см. [[#Примечания по использованию радиуса|примечания]])
* '''[filter_radius]''': a standard location filter; normally the radius extends outwards from matching locations one step at a time without checking any additional information-- however, if this tag is present, the radius will be restricted so that it can only expand outwards in the directions where it passes the given location filter
* '''[and]''': an extra location filter. Unless a location matches the [and] filter, then it will be excluded. ''Note: [and],[or],and [not] extra location filters are considered after everything else in the containing filter (except radius, which is considered last in 1.3.8 and greater); they are then processed in the order encountered.''
* '''[or]''': an extra location filter. If a location matches the [or] filter, then it will count as a match regardless of conditions in previous filters or the containing filter.
* '''[not]''': an extra location filter. If a location matches the [not] filter, then that location will be excluded.
* '''[filter_adjacent_location]''': a standard location filter; if present the correct number of adjacent locations must match this filter
** '''count''': a number, range, or comma separated range; default "1-6"
** '''adjacent''': a comma separated list of directions; default "n,ne,se,s,sw,nw"

== Примечания по использованию координат ==
When specifying coordinates, the following keys are used:
* '''x''': the first coordinate
* '''y''': the second coordinate

While some locations should only be one hex (like the starting position of a unit),
others filter over multiple hexes.
The following syntax is used to filter over multiple hexes:

Dashes('''-''') are used to have the location be a range of hexes.
There must be values before and after the dash;
everything in between these numbers (inclusively) is part of the range.

Commas(''',''') are used to separate coordinates into a list.
The '''x''' and '''y''' lists are then paired up, with each pair representing one hex or range. 
E.g. in order to specify multiple locations 1,4 and 2,5, use:
  [tag]
      x=1,2
      y=4,5
  [/tag]
Note: although the ordering of locations in a list generally does not matter,
the action '''[move_unit_fake]''' takes in a list of hexes,
and moves an image onto each of those hexes in order.

== Примечания по использованию радиуса ==
:If you aren't storing any locations successfully, it may be because you put the radius or filters in the wrong place for them to combine correctly.
  [have_location]
  terrain=Gg^Vh
  [and]
    x=$x1
    y=$y1
    radius=1
  [/and]
  [/have_location]
Note that the use of [and] here causes the radius to have a very different meaning. Normally, all of the criteria besides radius are checked, producing a set of hexes to which the radius is applied. This means, for example, that if you're trying to find "a hex without a unit on it within 5 hexes of (15, 23)", the code:
  [have_location]
  x,y=15,23
  radius=5
  [not]
    [filter]
    [/filter]
  [/not]
  [have_location]
will not work! First, it looks for a hex with x=15, y=23 without a unit on it. Then, it returns that hex and all hexes within 5 of it. If (15, 23) happens to be occupied, then it will return no hexes, because "all hexes within 5 hexes of (no hexes)" is still "no hexes". Instead, put an [and] around the x,y and radius requirements, and it will separately find "(15, 23) and all hexes within 5 of it" and "each of those hexes that doesn't have a unit on it", producing the desired result.


== Смотрите также ==
* [[ReferenceWML]]
* [[FilterWML]]

[[Category: WML Reference]]
